Junit:-

Junit is a Unit testing framework for Java.
It will test unit by unit...
A unit can have a single method or multi method or set of classes.
It is an open-source testing framework for java programmers. The java programmer can create test cases and test his/her own code.
To perform unit testing, we need to create test cases. The unit test case is a code which ensures that the program logic works as expected.
The org.junit package contains many interfaces and classes for junit testing such as Assert, Test, Before, After etc.
AAA - Arrange, Act, Assert
 
Types of unit testing:-
There are two ways to perform unit testing: 1) manual testing 2) automated testing.

1) Manual Testing
If you execute the test cases manually without any tool support, it is known as manual testing. It is time consuming and less reliable.

2) Automated Testing
If you execute the test cases by tool support, it is known as automated testing. It is fast and more reliable.

Annotations for Junit testing
The Junit 4.x framework is annotation based, so let's see the annotations that can be used while writing the test cases.

@Test annotation specifies that method is the test method.

@Test(timeout=1000) annotation specifies that method will be failed if it takes longer than 1000 milliseconds (1 second).

@BeforeClass annotation specifies that method will be invoked only once, before starting all the tests.


@Before annotation specifies that method will be invoked before each test.

@After annotation specifies that method will be invoked after each test.

@AfterClass annotation specifies that method will be invoked only once, after finishing all the tests.

Any Test method should be Public and return type should be void...because it should be accessible.
In one test method only one condition to be tested...then only we can understand in which method is pass and which method is fail.


If you annotate  a method @BeforeClass and @AfterClass...The method should be static 


Assert class
The org.junit.Assert class provides methods to assert the program logic.

Methods of Assert class
The common methods of Assert class are as follows:


void assertEquals(boolean expected,boolean actual): checks that two primitives/objects are equal. It is overloaded.
void assertTrue(boolean condition): checks that a condition is true.
void assertFalse(boolean condition): checks that a condition is false.
void assertNull(Object obj): checks that object is null.
void assertNotNull(Object obj): checks that object is not null.


Required jar files
You need to load junit4.jar and hamcrest-core.jar files.

Important notes:-

1.Name of the test case should meaningful for understanding...that what is going in the test case method.
2.In a test case method...there should be only one test condition should be passed.
3.only Highlight the important thing in test case method.
4.unimportant thing should take out of the test case method...put it in some other method.
5.The test case should be fail when code has bug...for external issues the test case should not fail...like changing dependencies, etc.
6.Write test case for all the method or class...complete as much as possible. 


package com.example.demo;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.List;

import org.junit.jupiter.api.Test;
/**
import org.junit.jupiter.api.MethodOrderer.OrderAnnotation;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
*/
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import com.example.demo.dao.UserProfileRepository;
import com.example.demo.model.UserProfile;
import com.example.demo.serviceimplementation.UserProfileServiceImplementation;

@SpringBootTest
//@TestMethodOrder(OrderAnnotation.class)
public class ServiceImplementationTest {
	
	@Autowired
	private UserProfileServiceImplementation userProfileServiceImplementation;
	@Autowired
	private UserProfileRepository userProfileRepository; 
	
	@Test
   //@Order(1)
	public void testSaveUser() {
		UserProfile up = new UserProfile();
		up.setUserName("Arun");
		up.setAddress("Chennai");
		up.setPhoneNo("23456");
		up.setEmailId("arun@gmail.com");
		up.setPassword("65432");
		userProfileServiceImplementation.saveUser(up);
		assertNotNull(userProfileRepository.findById(6).get());
	}
	
	@Test
    //@Order(2)
	public void testGetUser() {
		List<UserProfile> upList = userProfileServiceImplementation.getUser();
		assertThat(upList).size().isGreaterThan(0);
	}
	
	@Test
	//@Order(3)
	public void testSingleUserById() {
		UserProfile up1 = userProfileRepository.findById(3).get();
		assertEquals("45673" , up1.getPhoneNo());
	}
	
	@Test
    //@Order(4)
	public void testUpdateUser() {
		UserProfile up2 = userProfileRepository.findById(3).get();
		up2.setUserName("Asha");
		userProfileRepository.save(up2);
		assertNotEquals("Gowthami" ,userProfileRepository.findById(3).get().getUserName());
	}
	
	@Test
	//@Order(5)
	public void testDeleteUser() {
		userProfileServiceImplementation.deleteUser(6);
		assertThat(userProfileRepository.existsById(6)).isFalse();
	}

}




